# set this to false to disable sonars in firmware
#ORAZIO_USE_SONAR=false
ORAZIO_USE_SONAR=true

PREFIX=../../
ARCH=arch/atmega2560
CC=avr-gcc
INCLUDE_DIRS=-I$(PREFIX)/src/common -I$(PREFIX)/src/arch/include -I$(PREFIX)/src/orazio_firmware
CC_OPTS=-Wall --std=gnu99 -DF_CPU=16000000UL    -O3 -funsigned-char -funsigned-bitfields  -fshort-enums -Wall -Wstrict-prototypes -mmcu=atmega2560 -D_ARDUINO_MEGA_2560_ $(INCLUDE_DIRS) 


AVRDUDE=avrdude

# com1 = serial port. Use lpt1 to connect to parallel port.
AVRDUDE_PORT = /dev/ttyACM0    # programmer connected to serial device

AVRDUDE_WRITE_FLASH = -U flash:w:$(TARGET):i
AVRDUDE_FLAGS = -p m2560 -P $(AVRDUDE_PORT) -c $(AVRDUDE_PROGRAMMER) -b 115200
AVRDUDE_FLAGS += $(AVRDUDE_NO_VERIFY)
AVRDUDE_FLAGS += $(AVRDUDE_VERBOSE)
AVRDUDE_FLAGS += $(AVRDUDE_ERASE_COUNTER)
AVRDUDE_FLAGS += -D -q -V -C /usr/share/arduino/hardware/tools/avr/../avrdude.conf
AVRDUDE_FLAGS += -c wiring


OBJS=pins.o\
     uart.o\
     timer.o\
     eeprom.o\
     encoder.o\
     delay.o\
     digio.o\
     pwm.o\
     counter.o\
     packet_handler.o\
     deferred_packet_handler.o\
     orazio_globals.o\
     orazio_param.o\
     orazio_comm.o\
     orazio_joints_internal.o\
     orazio_joints.o\
     orazio_hbridge_internal.o\
     orazio_drive_internal.o\
     orazio_drive.o\
     orazio_watchdog.o

ifeq ($(ORAZIO_USE_SONAR),true)
OBJS 	+= sonar.o orazio_sonar.o
CC_OPTS += -D_ORAZIO_USE_SONAR_
BINS 	+=  sonar_test.elf
endif

HEADERS=packet_header.h\
	packet_operations.h\
	packet_handler.h\
	deferred_packet_handler.h\
	buffer_utils.h\
	orazio_comm.h \
	orazio_drive.h \
	orazio_drive_internal.h \
	orazio_globals.h \
	orazio_hbridge_internal.h \
	orazio_joints.h \
	orazio_joints_internal.h \
	orazio_param.h \
	orazio_pins.h \
	orazio_sonar.h \
	orazio_watchdog.h 


BINS= uart_test.elf\
      timer_test.elf\
      encoder_test.elf\
      eeprom_test.elf\
      digio_test.elf\
      pwm_test.elf\
      packet_send_test.elf\
      packet_echo_test.elf\
      packet_query_response_test.elf\
      orazio.elf

.phony:	clean all

all:	$(BINS)

#common objects
%.o:	$(PREFIX)/src/common/%.c 
	$(CC) $(CC_OPTS) -c  $<

#peripherials
%.o:	$(PREFIX)/src/$(ARCH)/%.c 
	$(CC) $(CC_OPTS) -c  $<

#peripherial test
%.o:	$(PREFIX)/src/micro_test/%.c 
	$(CC) $(CC_OPTS) -c  $<

#orazio server objects
%.o:	$(PREFIX)/src/orazio_firmware/%.c 
	$(CC) $(CC_OPTS) -c  $<

%.elf:	%.o $(OBJS)
	$(CC) $(CC_OPTS) -o $@ $< $(OBJS) $(LIBS)

clean:
	rm -rf $(OBJS) $(BINS) *.hex *~ *.o

%.hex:	%.elf
	avr-objcopy -O ihex -R .eeprom $< $@
	$(AVRDUDE) $(AVRDUDE_FLAGS) -U flash:w:$@:i $(AVRDUDE_WRITE_EEPROM) 
	rm $@
